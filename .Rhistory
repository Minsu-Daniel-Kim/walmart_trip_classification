print(z)
x <- 1:10
y <- 11:20
geommean <- function(x, y) {
return(sqrt(x*y))
}
z <- mapply(geommean, x, y)
print(z)
set.seed(0)
df <- data.frame(x = rnorm(10), y = rnorm(10), ltr = factor(sample(c("a", "b", "c"), 10, replace = TRUE)), nmbr = sample(c(1, 2, 3), 10, replace = TRUE))
z <- aggregate(df[, c("x", "y")], df[, c("ltr", "nmbr")], mean)
print(z)
df
z
x <- matrix(1:10, nrow = 2, ncol = 5)
xmean1 <- apply(x, 1, mean)
xmean1
x <- matrix(1:10, nrow = 2, ncol = 5)
x
xmean1 <- apply(x, 1, mean)
xmean1
xmean2 <- apply(x, 2, mean)
xmean2
?sweep
x <- matrix(1:10, nrow = 2, ncol = 5)
x
y <- sweep(x, 1, xmean1)
y
y <- sweep(x, 1, xmean1)
print(y)
z <- sweep(x, 2, xmean2)
print(z)
xmean2 <- apply(x, 2, mean)
xmean1
xmean2 <- apply(x, 2, mean)
xmean2
x
w <- sweep(x, 2, xmean1, FUN = "*")
print(w)
A <- data.frame(city = c("Norfolk", "Indianapolis", "Boston", "Albuquerque"),
state = c("Virginia", "Indiana", "Massachusetts", "New Mexico"))
A
B <- data.frame(city = c("Houston", "Atlanta", "Dallas", "Spokane"),
state = c("Texas", "Georgia", "Texas", "Washington"))
B
horizAB <- cbind(A, B)
horizAB
print(horizAB)
# In this case rbind probably makes more sense than cbind.
vertAB <- rbind(A, B)
print(vertAB)
C <- data.frame(city = c("Norfolk", "Indianapolis", "Detroit", "Buffalo"),
state = c("Virginia", "Indiana", "Michigan", "New York"))
D <- data.frame(city = c("Richmond", "Honolulu", "Norfolk", "Charleston"),
state = c("Virginia", "Hawaii", "Virginia", "South Carolina"))
C
D
vertCD <- rbind(C, D)
vertCD
C
D
vertCD
mergeCD <- merge(C, D, all = TRUE)
print(mergeCD)
E <- data.frame(city = c("Norfolk", "Indianapolis", "Boston", "Albuquerque"),
rain = c(44.7, 38.7, 42.5, 7.8))
E
A
mergeAE <- merge(A, E)
mergeAE
print(mergeAE)
precipdf <- data.frame(city = names(precip), precip = precip)
precipdf
A
A
B
merge(A,B)
merge(A, B)
a <- merge(A, B)
a
rbind(A,B)
merge(rbind(A,B), precipdf)
merge(rbind(A,B), precipdf, all.y = TRUE)
pop77 <- state.x77
head(pop77)
library("readr")
pop14 <- read_csv("https://www.census.gov/popest/data/state/totals/2014/tables/NST-EST2014-01.csv", skip = 3)
head(pop14)
pop77 <- state.x77
head(pop77)
library("readr")
pop14 <- read_csv("https://www.census.gov/popest/data/state/totals/2014/tables/NST-EST2014-01.csv", skip = 3)
head(pop14)
pop77df <- cbind(state = rownames(pop77), pop77)
pop77df
pop14mod <- data.frame(state = substring(pop14$"[EMPTY]", 2), pop2014 = pop14$"2014")
pop14mod
pop77
length(pop77)
pop14mod
View(pop14mod)
View(pop77)
merge(pop77, pop14mod)
length(merge(pop77, pop14mod))
nrow(merge(pop77, pop14mod))
pop14
pop14
head(pop14)
head(pop77)
merge(pop77, pop14$"2014")
merge(pop77, pop14$"2014")
merge(pop77, pop14$`2014`)
merge(pop77, pop14mod)
pop77
nrow(pop77)
pop14mod
head(pop14mod)
head(pop77)
class(pop77)
as.data.frame(pop77)
head(as.data.frame(pop77))
head(as.data.frame(pop77))
class(as.data.frame(pop77))
str(as.data.frame(pop77))
rownames(as.data.frame(pop77))
merge(as.data.frame(pop77), pop14mod)
merge(as.data.frame(pop77), pop14mod, by.x = rownames(as.data.frame(pop77)))
merge(pop77df, pop14mod)
apply(x, squish)
apply(x, FUN = squish)
sapply(x, FUN = squish)
sapply(x, FUN = squish)
library(shiny)
library(ggplot2)
library(ggmap)
library(rjson)
library(carpoolApi)
moves <- getAllMoves()
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 11, scale = 2)
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 11, scale = 2)
moves$Latitude
moves
moves$Latitude
summary(moves)
moves <- as.data.frame(moves)
moves
moves$Latitude
moves <- as.data.frame(getAllMoves())
moves
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 11, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 11, scale = 2)
View(moves)
summary(moves)
str(moves)
moves$Latitude = as.numeric(moves$Latitude)
moves$Longitude = as.numeric(moves$Longitude)
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 11, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 3, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 6, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 6, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Longitude, y = Latitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Latitude), lat = mean(moves$Longitude)), zoom = 6, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 6, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
View(moves)
moves <- as.data.frame(getAllMoves())
moves$Latitude = as.integer(moves$Latitude)
moves$Longitude = as.integer(moves$Longitude)
View(moves)
moves <- as.data.frame(getAllMoves())
moves$Latitude = as.double(moves$Latitude)
moves$Longitude = as.double(moves$Longitude)
View(moves)
moves <- getAllMoves()
str(moves)
moves <- as.data.frame(moves)
str(moves)
moves$Latitude = as.double(moves$Latitude)
moves <- getAllMoves()
moves <- as.data.frame(moves)
moves
View(moves)
moves$Latitude = as.numeric(as.character(moves$Latitude))
moves$Longitude =  as.numeric(as.character(moves$Longitude))
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 6, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 11, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
head(moves)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 11, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude, color = PdDistrict, fill = PdDistrict), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 11, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude, color = Date, fill = Date), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 11, scale = 3)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude, color = Date, fill = Date), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 13, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Latitude, y = Longitude, color = Date, fill = Date), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapgilbert <- get_map(location = c(lon = mean(moves$Longitude), lat = mean(moves$Latitude)), zoom = 13, scale = 2)
ggmap(mapgilbert) + geom_point(data = moves, aes(x = Longitude, y = Latitude, color = Date, fill = Date), alpha = 0.8, size = 2, shape = 21) + guides(fill=FALSE, alpha=FALSE, size=FALSE)
shiny::runApp('Documents/Carpool/app')
View(move)
View(moves)
moves[29:]
moves[29:, ]
moves[1:28, ]
moves[1:28, ] <- NULL
View(moves)
moves[29:nrow(moves), ] <- NULL
moves[29:nrow(moves), ] <- NULL
nrow(moves)
moves[29:nrow(moves), ]
View(moves[29:nrow(moves), ])
moves <- moves[29:nrow(moves), ]
View(moves)
str(moves)
library(lubridate)
moves <- moves[29:nrow(moves), ]
moves$Date <- ymd(moves$Date)
str(moves)
shiny::runApp('Documents/Carpool/app')
View(moves)
moves <- getAllMoves()
View(moves)
shiny::runApp('Documents/Carpool/app')
setwd("~/Documents/DataAnalysis/kaggle/walmart")
library(RCurl)
library(XML)
library(geosphere)
library(rattle)
library(party)
library(rpart.plot)
library(caret)
library(RColorBrewer)
library(dplyr)
library(rpart)
library(doMC)
library(lubridate)
library(ggplot2)
library(ggmap)
source("code/utils.R")
source("code/preprocess.R")
View(data)
ggplot(data, aes(x = weekday)) + geom_bar()
ggplot(data, aes(x = Weekday)) + geom_bar()
print(levels(data$Weekday))
x = factor(data$Weekday,levels(data$Weekday)[c(2, 6, 7, 5, 1, 3, 4)])
x
ggplot(x, aes(x = Weekday)) + geom_bar()
summary(x)
data$Weekday = factor(data$Weekday,levels(data$Weekday)[c(2, 6, 7, 5, 1, 3, 4)])
ggplot(data, aes(x = Weekday)) + geom_bar()
table(data$Weekday)
table(data$DepartmentDescription)
nrow(table(data$DepartmentDescription))
table(data$DeparmentDescription)
table(data$DeparmentDescription)
table(data$DepartmentDescription)
order(table(data$DepartmentDescription))
sort(table(data$DepartmentDescription))
sort(table(data$DepartmentDescription), decreasing = T)
sort(table(data$DepartmentDescription), decreasing = T)
sort(table(data$DepartmentDescription), decreasing = T)
sort(table(data$DepartmentDescription), decreasing = T)
table(data$DepartmentDescription)
sort(table(data$DepartmentDescription), decreasing = T)
sort(table(data$DepartmentDescription), decreasing = T)
ggplot(data, aes(x = DepartmentDescription)) + geom_bar()
ggplot(data, aes(x = DepartmentDescription, fill = DeparmentDescription)) + geom_bar()
ggplot(data, aes(x = DepartmentDescription, fill = DepartmentDescription)) + geom_bar()
summary(data)
nrow(data[data$ScanCount == -1, ])
ScanCount <- data[data$ScanCount == -1, ]
ggplot(ScanCount, aes(x = Weekday)) + geom_bar()
group_by_customer <- group_by(data, VisitNumber)
group_by_customer
swirl()
library(swirl)
swirl()
read.csv("path2csv", stringsAsFactors = F)
read.csv("path2csv", stringsAsFactors = FALSE)
read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv.csv", stringsAsFactors = FALSE)
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
had(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
cran
select(cran, -(X:size))
filter(cran, package = "swirl")
filter(cran, package == "swirl")
filter(cran, country == "US", version == "3.1.1")
filter(cran, country == "US", version == 3.1.1)
filter(cran, country == "US", r_version == "3.1.1")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
select(cran, desc(ip_id))
select(cran2, desc(ip_id))
arragne(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, zie)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
cran3
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran
cran <- tabl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
reset()
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(package),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
first = first(ip_id),
avg_bytes = mean(size))
pack_sum
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
first = max(ip_id),
avg_bytes = mean(size))
pack_sum
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
pack_sum
top_counts <- filter(pack_sum, size > 679()
top_counts <- filter(pack_sum, size > 679)
top_counts <- filter(pack_sum, avg_bytes > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_countrs)
View(top_counts)
top_counts_sorted <- arrange(pack_sum, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
by_package <- group_by(cran, package)
by_package
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
top_countries <- filter(pack_sum, countries > 60)
result1 <- arrange(top_countries, desc(countries), avg_bytes)
# Print the results to the console.
print(result1)
submit()
submit()
result3 <-
cran %>%
group_by(package) %>%
summarize(count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size)
) %>%
filter(countries > 60) %>%
arrange(desc(countries), avg_bytes)
print(result3)
submit()
View(result3)
cran %>%
select() %>%
print
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20)
submit()
cran %>%
select(ip_id, country, package, size) %>%
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5)
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5)
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(size_mb)
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb))
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count)
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
res
separate(res, sex_class, c("sex", "class"))
students2
students2 %>%
gather(sex_class, count, -grade) %>%
separate(sex_class , c("sex", "class")) %>%
print
submit()
students2 %>%
gather(sex_class, count, -grade) %>%
separate(c("sex", "class")) %>%
print
students2 %>%
gather(sex_class, count, -grade) %>%
separate(sex_class , c("sex", "class")) %>%
print
submit()
students3
students3 %>%
gather(class, grade, class1:class5 , = TRUE) %>%
print
students3 %>%
gather(class, grade, class1:class5 , na.omit= TRUE) %>%
print
students3 %>%
gather(class, grade, class1:class5 , na.rm= TRUE) %>%
print
submit()
